/*
 * Copyright (c) 2014, Linaro Limited
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef TA_HELLO_WORLD_H
#define TA_HELLO_WORLD_H

/* This UUID is generated with uuidgen
   the ITU-T UUID generator at http://www.itu.int/ITU-T/asn1/uuid.html */
#define TA_HELLO_WORLD_UUID { 0x8aaaf200, 0x2450, 0x11e4, \
		{ 0xab, 0xe2, 0x00, 0x02, 0xa5, 0xd5, 0xc5, 0x1b} }




  unsigned char TEST_key[]=
 {
 0x00,0x00,0x00,0x02,0xB5,0xD8,0xE9,0xAB,0x5F,0x8A,0xFE,0xCA,0x38,0x55,0xB1,0xA5,
0x1E,0xC9,0xBC,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xAE,0x3B,0x59,0x50,0x1D,0xCF,0xF8,0x50,
0x3E,0x56,0x8C,0xF5,0x9A,0x9D,0x7C,0xD7,0x48,0x6A,0x4A,0x87,0x0D,0x89,0x92,0x50,
0xCB,0x71,0xD3,0x7E,0x69,0xBC,0x7D,0x82,0xFA,0x65,0xB1,0xED,0x8F,0x46,0xA1,0xAC,
0x63,0x2A,0xD9,0xB4,0x0F,0xCE,0x02,0x5C,0xBD,0x39,0xFB,0x04,0x96,0xCD,0xA4,0x25,
0xF8,0x50,0xA1,0x83,0x4B,0x1B,0x58,0xFD,0xA4,0xD6,0xF2,0x60,0xCB,0xE5,0x9D,0x37,
0x9C,0xE9,0x1C,0x0C,0x4E,0x34,0x05,0x4F,0x88,0xC2,0xFE,0x66,0xEB,0x8A,0x68,0x04,
0x34,0x92,0xAA,0xD0,0x8F,0xDF,0x8B,0xD0,0x2D,0x6A,0xB6,0xCE,0x64,0x9B,0x57,0xE7,
0xDE,0x5E,0xB1,0x5A,0x9E,0xED,0x82,0xB6,0xFB,0xB7,0xE3,0x0D,0x68,0x28,0x44,0xCF,
0x29,0x5D,0xDB,0xF6,0x22,0x35,0xB9,0x2C,0x8D,0xBE,0xBA,0xA6,0xC7,0x01,0x00,0x01,
0x10,0x00,0xA3,0x60,0xEC,0x6C,0x4E,0xDC,0xC6,0x4C,0xF4,0x30,0xD2,0xE8,0x78,0xCB,
0xCC,0x38,0xBD,0x03,0x44,0x21,0x2B,0x7A,0x5A,0xAA,0x77,0xF7,0x08,0x0A,0xEA,0x6A,
0x41,0x40,0xA5,0x4A,0x23,0xAD,0x3B,0x50,0xDC,0xD7,0x65,0x84,0xCD,0xF3,0x27,0x3E,
0xA5,0xD4,0x6F,0x17,0xA2,0x92,0x03,0x12,0xE7,0x4B,0x83,0x9E,0x5B,0xA2,0xC1,0xD6,
0xEF,0x49,0xD3,0x7F,0xFD,0x06,0x11,0x56,0x6C,0x3B,0x04,0xA3,0x9A,0x39,0x70,0xE8,
0x09,0x34,0x24,0xDC,0x12,0x4C,0xFD,0x8C,0x12,0x07,0xA9,0x01,0x39,0x92,0x35,0x7C,
0xEF,0x32,0x23,0x57,0x9B,0x1D,0x85,0xCF,0x29,0x81,0xD4,0xEC,0x41,0x54,0xA8,0xFF,
0x9C,0xFC,0xB3,0xA3,0x1C,0xA2,0xD6,0x54,0x55,0x7A,0x6C,0xF0,0xDB,0x46,0xF0,0xAC,
0xB3,0x69,0xD4,0x0E,0x80,0x90,0xBF,0x66,0xDD,0x03,0x48,0x7B,0xAE,0x31,0x6E,0xA8,
0x8D,0xFE,0xFD,0xDB,0xD2,0x5B,0x19,0x4D,0x7A,0xFB,0x61,0xD4,0xF4,0x1F,0xDD,0x82,
0x27,0xBF,0xEC,0x76,0xEB,0xA1,0x6B,0x01,0x48,0xF0,0x35,0xF7,0xDC,0xC9,0xF1,0x6D,
0xEB,0x61,0x22,0x37,0xB2,0xD6,0xC4,0x95,0x2E,0xDC,0x96,0x38,0xEB,0x80,0x1E,0x2C,
0xB4,0x3A,0xB6,0x39,0x42,0xD1,0x1E,0x43,0x9A,0xED,0x46,0x47,0xC8,0xC9,0xB5,0x3C,
0x55,0x87,0x3F,0x6B,0x27,0x98,0x86,0x33,0x9C,0x9E,0x8C,0xC6,0xB4,0x71,0x1A,0xC4,
0xCD,0x24,0x0E,0xF0,0x6B,0x20,0x00,0x1B,0x0D,0xCF,0xA2,0xED,0x62,0x2A,0xCC,0xDF,
0x37,0xE7,0x13,0x74,0x55,0x36,0x12,0x71,0x0A,0xF9,0xB1,0xF7,0x32,0x5A,0x3A,0x22,
0x34,0x02,0x30,0x33,0x45,0x40,0x07,0xAA,0x45,0x84,0xAA,0x23,0x2E,0x6C,0x06,0xC3,
0x69,0x1E,0xB1,0xDA,0x18,0xC9,0x46,0xEA,0x4F,0x78,0xB7,0x2A,0x1F,0x7A,0x8C,0x47,
0xF7,0x7A,0x54,0xD1,0xEB,0xA1,0xB4,0x5C,0xDF,0x79,0x1A,0x62,0x53,0x8E,0xF4,0xFE,
0xD1,0x12,0xF2,0x28,0xDF,0x7A,0x13,0x7C,0x7E,0x77,0x79,0x6E,0x0A,0x86,0xCA,0x3A,
0xBD,0xD4,0x2C,0xF9,0xCF,0x36,0x84,0x5F,0x63,0x5A,0xA1,0x31,0xFC,0xB5,0x8C,0xC4,
0xE4,0x54,0x84,0x70,0x91,0x6B,0x69,0x63,0x7F,0x77,0x5E,0xA0,0x60,0x8A,0x09,0x57,
0x6E,0x67,0x4B,0x61,0xCE,0xEF,0x56,0xF3,0x95,0xF1,0x24,0x9E,0x9B,0xEB,0xFC,0xA9,
0x13,0xF8,0xB1,0xAD,0xCA,0xBE,0x8F,0x16,0x49,0x47,0x34,0x86,0x8F,0x8B,0x35,0x50,
0x09,0x54,0xE9,0xA1,0xB1,0x36,0xCB,0x26,0x56,0x18,0xCD,0x34,0xFB,0x99,0x81,0xA2,
0xC5,0x5D,0x5D,0xCE,0xCA,0x85,0x08,0x36,0xCB,0xB3,0x53,0xC5,0x7B,0xBA,0x04,0xA4,
0x2B,0x19,0x7A,0xDC,0x0C,0xD1,0xF1,0x82,0x6D,0x19,0x0D,0xE0,0x59,0x38,0x0A,0xDA,
0xD7,0x51,0x47,0xB8,0xFD,0x8E,0xA7,0x4D,0x4C,0xE5,0x82,0x38,0xD1,0x8C,0x9E,0xEB,
0xD5,0xB1,0xE3,0xE1,0xA7,0xA3,0xD5,0x56,0xE5,0x6F,0x95,0x1E,0x05,0x56,0xC5,0xAE,
0x7A,0xB1,0x3D,0x16,0x76,0xA7,0xC4,0xBF,0xBF,0xD5,0x30,0x14,0x51,0x87,0xA6,0x1C,
0xD3,0xEA,0x43,0xF9,0x1E,0x7A,0x9A,0x62,0xFC,0x33,0x98,0xEC,0xEC,0x0A,0x4F,0x83,
0xB4,0x1E,0x5E,0x2B,0x4E,0x6C,0xC7,0x03,0x56,0x39,0x0B,0xFC,0x06,0xEB,0xCD,0x40,
0x49,0xF7,0xE5,0xDA,0x53,0x7C,0x61,0xFF,0x94,0x83,0x10,0x19,0x09,0x53,0xAC,0x4B,
0xD4,0xBB,0x17,0xD8,0xA4,0x3C,0x9F,0xA9,0x31,0x5D,0x7B,0x94,0x76,0x36,0xBB,0xEC,
0x3C,0x0E,0xF4,0x65,0xDC,0x23,0x0C,0xE5,0x51,0xAA,0x6D,0x91,0x84,0x95,0x73,0x70,
0x7C,0x98,0x15,0xE5,0x35,0x68,0x8C,0xC6,0xAB,0x59,0xBD,0x75,0x63,0x0C,0x63,0x2A,
0x08,0xF1,0xD2,0x74,0x3B,0x2B,0x2E,0x42,0xC3,0x3F,0xCA,0xBA,0x5F,0xF9,0xE4,0x35,
0x20,0x30,0x81,0x97,0x36,0x5B,0xF8,0x73,0x92,0x09,0xA4,0x0E,0x8F,0xC1,0x34,0x23,
0x19,0x7F,0x17,0xE9,0x81,0x41,0x7F,0x45,0x7D,0x5F,0x75,0x93,0x10,0xE6,0xF0,0xCA,
0x54,0x55,0x5B,0x68,0xA9,0x54,0x02,0x73,0xCD,0x74,0x7F,0xE1,0xF0,0xCE,0x62,0xCF,
0x45,0xBF,0xC2,0xEF,0x7F,0xA0,0x88,0x42,0x96,0x63,0x97,0x6B,0x99,0x6C,0xB0,0xA8,
0xF5,0x87,0x99,0x91,0x4F,0xD2,0xA1,0x0F,0xD3,0x2C,0xD9,0x72,0x2E,0x02,0xC9,0xAB,
0xBC,0x9A,0xAA,0x1E,0xEB,0x86,0xC0,0x45,0x90,0xF0,0xBF,0x9D,0xA4,0xFB,0x61,0x9F,
0xD5,0xCD,0x0A,0xC7,0xC5,0xBE,0x0D,0xEC,0x8A,0xD9,0xC5,0x86,0x14,0x8E,0x46,0x02,
0xB3,0x9B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x40,
0x4E,0x74,0x7A,0x6B,0x7B,0x77,0xF7,0xAB,0xE7,0x36,0x04,0xB1,0x40,0x37,0x94,0x26,
0x5B,0x4C,0x77,0x56
};

 unsigned char gcLc128_test_cloud[] = {
	0x93, 0xce, 0x5a, 0x56, 0xa0, 0xa1, 0xf4, 0xf7, 0x3c, 0x65, 0x8a, 0x1b, 0xd2, 0xae, 0xf0, 0xf7
};

/* R1 Cert*/
 unsigned char gcCert1_test_cloud[] = {
	0x8b, 0xa4, 0x47, 0x42, 0xfb, 0xe4, 0x68, 0x63, 0x8a, 0xda, 0x97, 0x2d,
	0xde, 0x9a, 0x8d, 0x1c, 0xb1, 0x65, 0x4b, 0x85, 0x8d, 0xe5, 0x46, 0xd6, 0xdb, 0x95, 0xa5, 0xf6, 0x66, 0x74,
	0xea, 0x81, 0x0b, 0x9a, 0x58, 0x58, 0x66, 0x26, 0x86, 0xa6, 0xb4, 0x56, 0x2b, 0x29, 0x43, 0xe5, 0xbb, 0x81,
	0x74, 0x86, 0xa7, 0xb7, 0x16, 0x2f, 0x07, 0xec, 0xd1, 0xb5, 0xf9, 0xae, 0x4f, 0x98, 0x89, 0xa9, 0x91, 0x7d,
	0x58, 0x5b, 0x8d, 0x20, 0xd5, 0xc5, 0x08, 0x40, 0x3b, 0x86, 0xaf, 0xf4, 0xd6, 0xb9, 0x20, 0x95, 0xe8, 0x90,
	0x3b, 0x8f, 0x9f, 0x36, 0x5b, 0x46, 0xb6, 0xd4, 0x1e, 0xf5, 0x05, 0x88, 0x80, 0x14, 0xe7, 0x2c, 0x77, 0x5d,
	0x6e, 0x54, 0xe9, 0x65, 0x81, 0x5a, 0x68, 0x92, 0xa5, 0xd6, 0x40, 0x78, 0x11, 0x97, 0x65, 0xd7, 0x64, 0x36,
	0x5e, 0x8d, 0x2a, 0x87, 0xa8, 0xeb, 0x7d, 0x06, 0x2c, 0x10, 0xf8, 0x0a, 0x7d, 0x01, 0x00, 0x01, 0x10, 0x00,
	0x06, 0x40, 0x99, 0x8f, 0x5a, 0x54, 0x71, 0x23, 0xa7, 0x6a, 0x64, 0x3f, 0xbd, 0xdd, 0x52, 0xb2, 0x79, 0x6f,
	0x88, 0x26, 0x94, 0x9e, 0xaf, 0xa4, 0xde, 0x7d, 0x8d, 0x88, 0x10, 0xc8, 0xf6, 0x56, 0xf0, 0x8f, 0x46, 0x28,
	0x48, 0x55, 0x51, 0xc5, 0xaf, 0xa1, 0xa9, 0x9d, 0xac, 0x9f, 0xb1, 0x26, 0x4b, 0xeb, 0x39, 0xad, 0x88, 0x46,
	0xaf, 0xbc, 0x61, 0xa8, 0x7b, 0xf9, 0x7b, 0x3e, 0xe4, 0x95, 0xd9, 0xa8, 0x79, 0x48, 0x51, 0x00, 0xbe, 0xa4,
	0xb6, 0x96, 0x7f, 0x3d, 0xfd, 0x76, 0xa6, 0xb7, 0xbb, 0xb9, 0x77, 0xdc, 0x54, 0xfb, 0x52, 0x9c, 0x79, 0x8f,
	0xed, 0xd4, 0xb1, 0xbc, 0x0f, 0x7e, 0xb1, 0x7e, 0x70, 0x6d, 0xfc, 0xb9, 0x7e, 0x66, 0x9a, 0x86, 0x23, 0x3a,
	0x98, 0x5e, 0x32, 0x8d, 0x75, 0x18, 0x54, 0x64, 0x36, 0xdd, 0x92, 0x01, 0x39, 0x90, 0xb9, 0xe3, 0xaf, 0x6f,
	0x98, 0xa5, 0xc0, 0x80, 0xc6, 0x2f, 0xa1, 0x02, 0xad, 0x8d, 0xf4, 0xd6, 0x66, 0x7b, 0x45, 0xe5, 0x74, 0x18,
	0xb1, 0x27, 0x24, 0x01, 0x1e, 0xea, 0xd8, 0xf3, 0x79, 0x92, 0xe9, 0x03, 0xf5, 0x57, 0x8d, 0x65, 0x2a, 0x8d,
	0x1b, 0xf0, 0xda, 0x58, 0x3f, 0x58, 0xa0, 0xf4, 0xb4, 0xbe, 0xcb, 0x21, 0x66, 0xe9, 0x21, 0x7c, 0x76, 0xf3,
	0xc1, 0x7e, 0x2e, 0x7c, 0x3d, 0x61, 0x20, 0x1d, 0xc5, 0xc0, 0x71, 0x28, 0x2e, 0xb7, 0x0f, 0x1f, 0x7a, 0xc1,
	0xd3, 0x6a, 0x1e, 0xa3, 0x54, 0x34, 0x8e, 0x0d, 0xd7, 0x96, 0x93, 0x78, 0x50, 0xc1, 0xee, 0x27, 0x72, 0x3a,
	0xbd, 0x57, 0x22, 0xf0, 0xd7, 0x6d, 0x9d, 0x65, 0xc4, 0x07, 0x9c, 0x82, 0xa6, 0xd4, 0xf7, 0x6b, 0x9a, 0xe9,
	0xc0, 0x6c, 0x4a, 0x4f, 0x6f, 0xbe, 0x8e, 0x01, 0x37, 0x50, 0x3a, 0x66, 0xd9, 0xe9, 0xd9, 0xf9, 0x06, 0x9e,
	0x00, 0xa9, 0x84, 0xa0, 0x18, 0xb3, 0x44, 0x21, 0x24, 0xa3, 0x6c, 0xcd, 0xb7, 0x0f, 0x31, 0x2a, 0xe8, 0x15,
	0xb6, 0x93, 0x6f, 0xb9, 0x86, 0xe5, 0x28, 0x01, 0x1a, 0x5e, 0x10, 0x3f, 0x1f, 0x4d, 0x35, 0xa2, 0x8d, 0xb8,
	0x54, 0x26, 0x68, 0x3a, 0xcd, 0xcb, 0x5f, 0xfa, 0x37, 0x4a, 0x60, 0x10, 0xb1, 0x0a, 0xfe, 0xba, 0x9b, 0x96,
	0x5d, 0x7e, 0x99, 0xcf, 0x01, 0x98, 0x65, 0x87, 0xad, 0x40, 0xd5, 0x82, 0x1d, 0x61, 0x54, 0xa2, 0xd3, 0x16,
	0x3e, 0xf7, 0xe3, 0x05, 0x89, 0x8d, 0x8a, 0x50, 0x87, 0x47, 0xbe, 0x29, 0x18, 0x01, 0xb7, 0xc3, 0xdd, 0x43,
	0x23, 0x7a, 0xcd, 0x85, 0x1d, 0x4e, 0xa9, 0xc0, 0x1a, 0xa4, 0x77, 0xab, 0xe7, 0x31, 0x9a, 0x33, 0x1b, 0x7a,
	0x86, 0xe1, 0xe5, 0xca, 0x0c, 0x43, 0x1a, 0xfa, 0xec, 0x4c, 0x05, 0xc6, 0xd1, 0x43, 0x12, 0xf9, 0x4d, 0x3e,
	0xf7, 0xd6, 0x05, 0x9c, 0x1c, 0xdd,
};
#if 1
/*R1 Private Key*/
 unsigned char gcKpriv1_test_cloud[] = {
	    /*p[] =*/

		0xf5, 0xf6, 0xfa, 0x44, 0xa2, 0x16, 0x2f, 0xa7, 0x1f, 0x7f, 0x16,
		0x05, 0x99, 0x26, 0xc4, 0x1b, 0x80, 0x7f, 0xfa, 0x52, 0x4e, 0x3e,
		0xaa, 0x3d, 0x1e, 0xb0, 0xf1, 0x9a, 0xc6, 0x3d, 0x8f, 0x57, 0x2b,
		0x9e, 0xcd, 0xe8, 0x03, 0xd6, 0xf3, 0x91, 0x75, 0xe2, 0x19, 0x44,
		0x9e, 0x11, 0x58, 0x5f, 0xd6, 0x88, 0x7c, 0xc4, 0xc1, 0x5b, 0x45,
		0x9b, 0x84, 0xcf, 0x72, 0x1d, 0x35, 0xbf, 0x24, 0xd5,
	
  /*q[] = */
		0xed, 0xba, 0x08, 0xbf, 0x42, 0x2c, 0x0e, 0xfa, 0x3a, 0xc4, 0xd2,
		0xc7, 0x01, 0x51, 0x25, 0xae, 0xb0, 0xa1, 0xcc, 0xdb, 0x67, 0x9b,
		0xaa, 0x50, 0xf0, 0x80, 0xac, 0x4b, 0x9f, 0x5c, 0xba, 0x1e, 0xf4,
		0x7f, 0xa9, 0xb3, 0x21, 0x8b, 0x62, 0x2c, 0x36, 0xda, 0xcd, 0xa7,
		0x4d, 0xa4, 0xd6, 0x44, 0xed, 0xb1, 0x34, 0xe7, 0x69, 0x10, 0x77,
		0x5a, 0x6a, 0xff, 0xf5, 0x63, 0x8a, 0x2c, 0x43, 0x09,
   /*dP[] = */
		0x61, 0x5a, 0xc4, 0x6c, 0x6e, 0x0b, 0x82, 0x09, 0x10, 0x3a, 0x69,
		0x29, 0x06, 0x19, 0x85, 0xfd, 0xac, 0xba, 0xfb, 0x05, 0xa0, 0xda,
		0xc4, 0xdf, 0x34, 0x4a, 0xad, 0x16, 0xa9, 0xe8, 0xab, 0xd7, 0xc0,
		0xf8, 0x36, 0x5f, 0xe3, 0x45, 0x2d, 0x5b, 0x21, 0xe1, 0xc0, 0x46,
		0x9c, 0x9a, 0x18, 0xf4, 0xb6, 0x21, 0x87, 0xe1, 0x08, 0xf7, 0x6b,
		0x71, 0xc6, 0xfb, 0xa5, 0x1b, 0x52, 0xae, 0xb9, 0x91,
  /*dQ[] = */
		0x5a, 0x83, 0x7f, 0xbb, 0x1a, 0xbd, 0xdd, 0xc2, 0x06, 0xc8, 0x54,
		0x1c, 0xb3, 0x72, 0xab, 0x2f, 0x55, 0x4f, 0x75, 0xc9, 0x80, 0x2c,
		0x73, 0xef, 0xb7, 0x72, 0xb6, 0xa7, 0x60, 0x79, 0x14, 0xe0, 0x9e,
		0x65, 0x51, 0x3e, 0xc4, 0x21, 0xe6, 0xf2, 0x40, 0xbc, 0x94, 0x9b,
		0x03, 0xe4, 0x24, 0x35, 0x40, 0x6f, 0x3d, 0x5e, 0x72, 0xd1, 0x73,
		0x30, 0x39, 0x17, 0x55, 0xde, 0x5d, 0x88, 0xb6, 0xc9,
   /*qInv[] =*/
		0xbc, 0x91, 0x2a, 0x93, 0x6a, 0x8d, 0x24, 0x3c, 0xd5, 0x7d, 0x12,
		0x3b, 0xa3, 0x71, 0xc7, 0x3a, 0xf0, 0x64, 0x72, 0x50, 0x7e, 0x18,
		0x71, 0xe1, 0xb4, 0x3b, 0x1e, 0xfc, 0x38, 0xca, 0xe6, 0x8c, 0x16,
		0x51, 0x97, 0xd6, 0x3f, 0x04, 0xee, 0x23, 0x8b, 0x45, 0x0c, 0x4b,
		0x98, 0x36, 0x18, 0x27, 0x29, 0x1b, 0x4d, 0x73, 0x7e, 0xe8, 0xb0,
		0x1a, 0xc7, 0xfb, 0x5c, 0xea, 0x78, 0xd0, 0x6e, 0x97,
	 
};
#else
/*R1 Private Key*/
 kpriv_t gcKpriv1_test_cloud[] = {
	    /*p[] =*/
	{
		0xf5, 0xf6, 0xfa, 0x44, 0xa2, 0x16, 0x2f, 0xa7, 0x1f, 0x7f, 0x16,
		0x05, 0x99, 0x26, 0xc4, 0x1b, 0x80, 0x7f, 0xfa, 0x52, 0x4e, 0x3e,
		0xaa, 0x3d, 0x1e, 0xb0, 0xf1, 0x9a, 0xc6, 0x3d, 0x8f, 0x57, 0x2b,
		0x9e, 0xcd, 0xe8, 0x03, 0xd6, 0xf3, 0x91, 0x75, 0xe2, 0x19, 0x44,
		0x9e, 0x11, 0x58, 0x5f, 0xd6, 0x88, 0x7c, 0xc4, 0xc1, 0x5b, 0x45,
		0x9b, 0x84, 0xcf, 0x72, 0x1d, 0x35, 0xbf, 0x24, 0xd5
	 },
	    /*q[] = */
	{
		0xed, 0xba, 0x08, 0xbf, 0x42, 0x2c, 0x0e, 0xfa, 0x3a, 0xc4, 0xd2,
		0xc7, 0x01, 0x51, 0x25, 0xae, 0xb0, 0xa1, 0xcc, 0xdb, 0x67, 0x9b,
		0xaa, 0x50, 0xf0, 0x80, 0xac, 0x4b, 0x9f, 0x5c, 0xba, 0x1e, 0xf4,
		0x7f, 0xa9, 0xb3, 0x21, 0x8b, 0x62, 0x2c, 0x36, 0xda, 0xcd, 0xa7,
		0x4d, 0xa4, 0xd6, 0x44, 0xed, 0xb1, 0x34, 0xe7, 0x69, 0x10, 0x77,
		0x5a, 0x6a, 0xff, 0xf5, 0x63, 0x8a, 0x2c, 0x43, 0x09
	 },
	    /*dP[] = */
	{
		0x61, 0x5a, 0xc4, 0x6c, 0x6e, 0x0b, 0x82, 0x09, 0x10, 0x3a, 0x69,
		0x29, 0x06, 0x19, 0x85, 0xfd, 0xac, 0xba, 0xfb, 0x05, 0xa0, 0xda,
		0xc4, 0xdf, 0x34, 0x4a, 0xad, 0x16, 0xa9, 0xe8, 0xab, 0xd7, 0xc0,
		0xf8, 0x36, 0x5f, 0xe3, 0x45, 0x2d, 0x5b, 0x21, 0xe1, 0xc0, 0x46,
		0x9c, 0x9a, 0x18, 0xf4, 0xb6, 0x21, 0x87, 0xe1, 0x08, 0xf7, 0x6b,
		0x71, 0xc6, 0xfb, 0xa5, 0x1b, 0x52, 0xae, 0xb9, 0x91
	 },
	    /*dQ[] = */
	{
		0x5a, 0x83, 0x7f, 0xbb, 0x1a, 0xbd, 0xdd, 0xc2, 0x06, 0xc8, 0x54,
		0x1c, 0xb3, 0x72, 0xab, 0x2f, 0x55, 0x4f, 0x75, 0xc9, 0x80, 0x2c,
		0x73, 0xef, 0xb7, 0x72, 0xb6, 0xa7, 0x60, 0x79, 0x14, 0xe0, 0x9e,
		0x65, 0x51, 0x3e, 0xc4, 0x21, 0xe6, 0xf2, 0x40, 0xbc, 0x94, 0x9b,
		0x03, 0xe4, 0x24, 0x35, 0x40, 0x6f, 0x3d, 0x5e, 0x72, 0xd1, 0x73,
		0x30, 0x39, 0x17, 0x55, 0xde, 0x5d, 0x88, 0xb6, 0xc9
	 },
	    /*qInv[] =*/
	{
		0xbc, 0x91, 0x2a, 0x93, 0x6a, 0x8d, 0x24, 0x3c, 0xd5, 0x7d, 0x12,
		0x3b, 0xa3, 0x71, 0xc7, 0x3a, 0xf0, 0x64, 0x72, 0x50, 0x7e, 0x18,
		0x71, 0xe1, 0xb4, 0x3b, 0x1e, 0xfc, 0x38, 0xca, 0xe6, 0x8c, 0x16,
		0x51, 0x97, 0xd6, 0x3f, 0x04, 0xee, 0x23, 0x8b, 0x45, 0x0c, 0x4b,
		0x98, 0x36, 0x18, 0x27, 0x29, 0x1b, 0x4d, 0x73, 0x7e, 0xe8, 0xb0,
		0x1a, 0xc7, 0xfb, 0x5c, 0xea, 0x78, 0xd0, 0x6e, 0x97
	 },
};

#endif


/*
#define LC128_SIZE (128/8)
#define CERT_RX_SIZE (4176/8)
#define KPRIVRX_SIZE (2560/8)

unsigned char VAR_LC128[LC128_SIZE];
unsigned char VAR_CERT_RX[CERT_RX_SIZE];
unsigned char VAR_KPRIVRX[KPRIVRX_SIZE];
*/
/* The TAFs ID implemented in this TA */
//command

#define LC_128      0x0
#define CERT_RX    0x1
#define KPRIVRX     0x2
#define RRX             0x3


#define Rrx_SIZE (8)

#define TA_HELLO_WORLD_CMD_INC_VALUE 0xff
#define TA_HDCP2p2_SETLC128                    0x01
#define TA_HDCP2p2_CERT_RX                    0x02
#define TA_HDCP2p2_SETKPRIVRX                    0x03
#define TA_HDCP2p2_GetCertRx                 0x04
#define TA_HDCP2p2_GETKPRIVRX                    0x05
#define TA_HDCP2p2_GenRrx                      0x06
#define TA_HDCP2p2_GetRrx                      0x07
#define TA_processAkeInit_Command                      0x08
#define TA_processAkeNoStoredEkm_Command                      0x09
#define TA_processAkeStoredEkm_Command                      0xa
#define TA_hdcp2_Rx_GetEKhKm_Command                      0xb
#define TA_processLcInit_Command                      0xc
#define TA_processSkeSendEks_Command                      0xd
enum WIDEVINE_CMD_FOR_TA
{
	TA_TEE_OpenKeybox 			= 0x1,
	TA_TEE_IsKeyboxValid 		= 0x2,
	TA_TEE_GetKeyData			= 0x3,
	TA_TEE_GetDeviceID 			= 0x4,
	TA_TEE_RandomData 			= 0x5,
	TA_TEE_SetIVBuffer			= 0x6,
	TA_TEE_SetEntitlementKey 	= 0x7,
	TA_TEE_DeriveControlWord 	= 0x8,
	TA_TEE_DecryptAVContent 	= 0x9
};

#define AES_BLOCK_SIZE 16







#endif /*TA_HELLO_WORLD_H*/
